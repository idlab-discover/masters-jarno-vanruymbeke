package wasi:gpio;

interface gpio {

    // Embedded HAL mapping
    /// Error kind.
    variant error-kind {
        /// A different error occurred. The original error may contain more information.
        other,
    }

    // Embedded HAL mapping
    /// Digital output pin state.
    variant pin-state {
        /// Low pin state.
        low,

        /// High pin state.
        high,
    }

    // Embedded HAL mapping
    /// Single digital push-pull output pin.
    resource output-pin {
        /// Drives the pin low.
        ///
        /// *NOTE* the actual electrical state of the pin may not actually be low, e.g. due to external
        /// electrical sources.
        set-low: func() -> result<_, error-kind>;

        /// Drives the pin high.
        ///
        /// *NOTE* the actual electrical state of the pin may not actually be high, e.g. due to external
        /// electrical sources.
        set-high: func() -> result<_, error-kind>;

        /// Drives the pin high or low depending on the provided value.
        ///
        /// *NOTE* the actual electrical state of the pin may not actually be high or low, e.g. due to external
        /// electrical sources.
        set-state: func(state: pin-state) -> result<_, error-kind>;
    }

    // Embedded HAL mapping
    /// Push-pull output pin that can read its output state.
    resource stateful-output-pin {
        /// Have the same function available as output-pin
        //use output-pin.{set-low, set-high, set-state};

        /// Is the pin in drive high mode?
        ///
        /// *NOTE* this does *not* read the electrical state of the pin.
        is-set-high: func() -> result<bool, error-kind>;

        /// Is the pin in drive low mode?
        ///
        /// *NOTE* this does *not* read the electrical state of the pin.
        is-set-low: func() -> result<bool, error-kind>;

        /// Toggle pin output.
        toggle: func() -> result<_, error-kind>;
    }

    // Embedded HAL mapping
    resource input-pin {
        is-high: func() -> result<bool, error-kind>;
        is-low: func() -> result<bool, error-kind>;
        // CUSTOM
        // get_state() -> result<bool, ERROR>; // To be in the same line as the set_state function in OutputPin
    }
}