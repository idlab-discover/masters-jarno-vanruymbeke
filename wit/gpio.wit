package example:gpio;

interface general {
    type pin-number = u8; // Type alias for GPIO pin number

    // Error types
    variant gpio-error {
        hardware-fault, // Broken pin/chip
        pin-not-allowed, // Policy does not allow this pin to be used at all
        pin-mode-not-allowed, // Pin is usable but not in the specified mode, specified by policy or pinmode just changed
        pin-number-not-available, // E.g. GPIO pin 1000
        pin-mode-not-available, // E.g. PWM mode for a pin without that functionallity
        other(string) // In case all above error types don't describe the problem
    }
}

interface digital {
    use general.{pin-number};
    use general.{gpio-error};

    // Enum types for GPIO pin states
    enum pin-state {
        high,
        low
    }

    // Digital Output Pin resource, describes the functionallity of a general digital output pin
    // Sets the pin state to 'high' or 'low'
    resource digital-out-pin {
        pin-number: func() -> pin-number;                                  // Returns the pin number tied to this resource

        set-state: func(state: pin-state) -> result<_, gpio-error>;        // Sets the pin to a specific state

        set-high: func() -> result<_, gpio-error>;                         // Sets the pin to a high state (max V)
        set-low: func() -> result<_, gpio-error>;                          // Sets the pin to a low state (min V)
        toggle: func() -> result<_, gpio-error>;                           // Toggles the pin state
    }

    // Digital Input Pin resource, describes the functionallity of a general digital input pin
    // Reads the pin and outputs 'high' or 'low'
    resource digital-in-pin {
        pin-number: func() -> pin-number; // Returns the pin number tied to this resource

        read: func() -> result<pin-state, gpio-error>;                     // Returns the pin state, high for max V, low for min V

        is-high: func() -> result<bool, gpio-error>;                       // Returns if the pin is in a high state (max V)
        is-low: func() -> result<bool, gpio-error>;                        // Returns if the pin is in a low state (min V)

        wait-until-state: func(state: pin-state) -> result<_, gpio-error>; // Blocks the guest until a specific state is reached
        wait-until-high: func() -> result<_, gpio-error>;                  // Blocks the guest until the high state is reached
        wait-until-low: func() -> result<_, gpio-error>;                   // Blocks the guest until the low state is reached

        wait-until-falling-edge: func() -> result<_, gpio-error>;          // Blocks the guest until a falling edge happened
        wait-until-rising-edge: func() -> result<_, gpio-error>;           // Blocks the guest until a rising edge happened
    }

    // Functions to acquire certain GPIO pins configured in the desired mode
    // These functions can also be used for pins that are allowed to change mode, if pin 1 was an input but can also be an output,
    // calling get-digital-output will return a digital-output-pin tied to that specific pin and the earlier acquired resource will
    // return error types when it's methods are being invoked
    get-digital-in: func(pin-nr: pin-number) -> result<digital-in-pin, gpio-error>;
    get-digital-out: func(pin-nr: pin-number) -> result<digital-out-pin, gpio-error>;
}

interface analog {
    use general.{pin-number};
    use general.{gpio-error}

    // Analog Output Pin resource, describes the functionallity of a general analog output pin
    // Pins output PWM signals
    resource analog-out-pin {
        pin-number: func() -> pin-number;                                  // Returns the pin number tied to this resource

        set-value: func(value: u16) -> result<_, gpio-error>;              // Sets the pin PWM value according to the input, when going over the resolution of the DAC, the pin will be a max V
    }

    // Analog Input Pin resource, describes the functionallity of a general analog input pin
    // Reads by means of an ADC
    resource analog-in-pin {
        get-pin-nr: func() -> pin-number;                                  // Returns the pin number tied to this resource

        read: func() -> u16;                                               // Reads the ADC value of the analog input pin, according to the resolution of the ADC

        wait-until-above: func(value: u16);                                // Waits until the ADC measures a value above the treshold
        wait-until-below: func(value: u16);                                // Waits until the ADC measures a value below the treshold
    }

    // Functions to acquire certain GPIO pins configured in the desired mode
    // The same functionallity for changing pins as the digital interface
    get-analog-in: func(pin-nr: pin-number) -> result<analog-in-pin, gpio-error>;
    get-analog-out: func(pin-nr: pin-number) -> result<analog-out-pin, gpio-error>;
}

world gpio {
    import digital;
    import analog;
}
