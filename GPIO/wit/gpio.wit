package example:gpio;

interface general {
    variant gpio-error {
        hardware-fault, // Chip controller cannot access the pin (e.g. pin is blown)
        already-in-use, // Pin is already in use by another process
        pin-not-allowed, // Policy does not allow this pin to be used at all
        pin-mode-not-allowed, // Pin is usable but not in the specified mode, specified by the policy
        undefined-pin-label, // A pin with that label does not exist on the system (e.g. GPIOINVALID)
        pin-mode-not-available, // The pin mode does not exist for that pin (e.g. PWM mode for a purely digital pin)
        would-block, // The function would block if used in an interrupt context
        other(string) // Unspecified error, error message might give hints but not guaranteed
    }

    enum active-level {
        active-high,
        active-low,
    }

    enum pin-mode {
        in,
        out,
        in-out
    }

    enum pull-resistor {
        pull-up,
        pull-down,
    }
}

interface digital {
    use general.{gpio-error, pin-mode, active-level, pull-resistor};
    use wasi:io/poll@0.2.4.{pollable};

    // Enum that describes the state of a digital pin, active meaning the pin is driven by the controller
    // Some gpio pin controllers allow pins to be configured active high or active low
    // Active high means that when a pin is active, the voltage on that pin is equivalent to a binary 1 and inactive is equivalent to a binary 0
    // Active low is vice versa
    enum pin-state {
        active,
        inactive
    }

    record digital-config {
        label: string,
        pin-mode: pin-mode,
        active-level: active-level,
        pull-resistor: option<pull-resistor>,
    }

    flags digital-flags {
        active-high,
        active-low,
        pull-up,
        pull-down
    }

    // Digital Output Pin resource, describes the functionality of a general digital output pin
    // Sets the pin state to 'active' or 'inactive'
    resource digital-out-pin {
        // Returns the configuration of the gpio this resource is tied to
        get-config: func() -> digital-config;

        // Sets the pin to a specific state
        set-state: func(state: pin-state) -> result<_, gpio-error>;

        // Sets the pin to the active state
        set-active: func() -> result<_, gpio-error>;
        // Sets the pin to the inactive state
        set-inactive: func() -> result<_, gpio-error>;
        // Toggles the pin state
        toggle: func() -> result<_, gpio-error>;
    }

    // Digital Input Pin resource, describes the functionality of a general digital input pin
    // Reads the pin and outputs 'high' or 'low'
    resource digital-in-pin {
        // Returns the configuration of the gpio this resource is tied to
        get-config: func() -> digital-config;

        // Returns the pin state
        read: func() -> result<pin-state, gpio-error>;

        // Returns if the pin is in the active state
        is-active: func() -> result<bool, gpio-error>;
        // Returns if the pin is in the inactive state
        is-inactive: func() -> result<bool, gpio-error>;

        // Returns a pollable if this function succeeds, the pollable will be ready whenever the desired state is reached
        watch-state: func(state: pin-state) -> result<pollable, gpio-error>;
        // Returns a pollable if this function succeeds, the pollable will be ready whenever the active state is reached
        watch-active: func() -> result<pollable, gpio-error>;
        // Returns a pollable if this function succeeds, the pollable will be ready whenever the inactive state is reached
        watch-inactive: func() -> result<pollable, gpio-error>;

        // Returns a pollable if this function succeeds, the pollable will be ready whenever a falling edge happened, a falling edge is the transition from 'active' to 'inactive'
        watch-falling-edge: func() -> result<pollable, gpio-error>;
        // Returns a pollable if this function succeeds, the pollable will be ready whenever a falling edge happened, a falling edge is the transition from 'inactive' to 'active'
        watch-rising-edge: func() -> result<pollable, gpio-error>;
    }

    // Digital Input Pin resource, describes the functionality of a general digital input pin
    // Reads the pin and outputs 'high' or 'low'
    resource digital-in-out-pin {
        // Returns the configuration of the gpio this resource is tied to
        get-config: func() -> digital-config;

        // Sets the pin to a specific state
        set-state: func(state: pin-state) -> result<_, gpio-error>;

        // Sets the pin to the active state
        set-active: func() -> result<_, gpio-error>;
        // Sets the pin to the inactive state
        set-inactive: func() -> result<_, gpio-error>;
        // Toggles the pin state
        toggle: func() -> result<_, gpio-error>;

        // Returns the pin state
        read: func() -> result<pin-state, gpio-error>;

        // Returns if the pin is in the active state
        is-active: func() -> result<bool, gpio-error>;
        // Returns if the pin is in the inactive state
        is-inactive: func() -> result<bool, gpio-error>;

        // Returns a pollable if this function succeeds, the pollable will be ready whenever the desired state is reached
        watch-state: func(state: pin-state) -> result<pollable, gpio-error>;
        // Returns a pollable if this function succeeds, the pollable will be ready whenever the active state is reached
        watch-active: func() -> result<pollable, gpio-error>;
        // Returns a pollable if this function succeeds, the pollable will be ready whenever the inactive state is reached
        watch-inactive: func() -> result<pollable, gpio-error>;

        // Returns a pollable if this function succeeds, the pollable will be ready whenever a falling edge happened, a falling edge is the transition from 'active' to 'inactive'
        watch-falling-edge: func() -> result<pollable, gpio-error>;
        // Returns a pollable if this function succeeds, the pollable will be ready whenever a falling edge happened, a falling edge is the transition from 'inactive' to 'active'
        watch-rising-edge: func() -> result<pollable, gpio-error>;
    }

    // Functions to acquire certain GPIO pins configured in the desired mode
    // These functions can also be used for pins that are allowed to change mode, if pin 1 was an input but can also be an output,
    // calling get-digital-out will return a digital-out-pin tied to that specific pin and the earlier acquired resource will
    // return error types when it's methods are being invoked
    get-digital-in: func(pin-label: string, %flags: list<digital-flags>) -> result<digital-in-pin, gpio-error>;
    get-digital-out: func(pin-label: string, %flags: list<digital-flags>) -> result<digital-out-pin, gpio-error>;
    get-digital-in-out: func(pin-label: string, %flags: list<digital-flags>) -> result<digital-in-out-pin, gpio-error>;
}

interface analog {
    use general.{gpio-error, pin-mode};
    use wasi:io/poll@0.2.4.{pollable};

    record analog-config {
        label: string,
        pin-mode: pin-mode,
    }

    flags analog-flags {
        active-high,
        active-low,
    }

    resource analog-out-pin {
        // Returns the configuration of the gpio this resource is tied to
        get-config: func() -> analog-config;

        // Sets the PWM value of the pin according to the input value, the value depends on if the pin is active high or active low
        // The value has sufficient margin to also support 32 bit DAC's, when used with a lower resolution DAC, all value above that resolution will represent a fully active state
        // If the pin is active high, higher values (until the max value of the DAC) will result in a higher duty cycle
        // If the pin is active low, higher values (until the max value of the DAC) will result in a lower duty cycle
        set-value-raw: func(value: u32) -> result<_, gpio-error>;
        // Sets the PWM value of the pin according to the input value, the value depends on if the pin is active high or active low
        // The value has sufficient margin to also support 32 bit DAC's, when used with a lower resolution DAC, all value above that resolution will represent a fully active state
        // If the pin is active high, higher values (until the max value of the DAC) will result in a higher duty cycle
        // If the pin is active low, higher values (until the max value of the DAC) will result in a lower duty cycle
        set-value: func(value: f32) -> result<_, gpio-error>;
    }

    resource analog-in-pin {
        // Returns the configuration of the gpio this resource is tied to
        get-config: func() -> analog-config;

        // Read the raw value the ADC returns, the value depends on if the pin is active high or active low
        // The value has sufficient margin to also support 32 bit ADC's, when used with a lower resolution ADC, the maximum value returned will be the maximum value the ADC can return
        // If the pin is active high, higher values mean higher voltage
        // If the pin is active low, higher values mean lower voltage
        read-raw: func() -> result<u32, gpio-error>;
        // Read the raw value the ADC returns, the value depends on if the pin is active high or active low
        // The value describes a fraction of the fully active state, so the value must lie in the interval [0.0, 1.0] with 0.0 meaning fully inactive, 1.0 meaning fully active and 0.5 laying in the middle between fully inactive and fully active
        // If the pin is active high, higher values mean higher voltage
        // If the pin is active low, higher values mean lower voltage
        read: func() -> result<f32, gpio-error>;

        // Returns a pollable if this function succeeds, the pollable will be ready whenever the voltage level is above a certain value, above has different meanings if the gpio is active high or active low
        // Value describes a value the ADC can return and has sufficient margin to also support 32 bit ADC's, when used with a lower resolution ADC, all values above the limit of the ADC will be considered as watching for the fully active state
        // If the pin is active high, above means that the voltage is higher than the voltage value describes
        // If the pin is active low, above means that the voltage is lower than the voltage value describes
        watch-above-raw: func(value: u32) -> result<pollable, gpio-error>;
        // Returns a pollable if this function succeeds, the pollable will be ready whenever the voltage level is above a certain value, above has different meanings if the gpio is active high or active low
        // The value describes a fraction of the fully active state, so the value must lie in the interval [0.0, 1.0] with 0.0 meaning fully inactive, 1.0 meaning fully active and 0.5 laying in the middle between fully inactive and fully active
        // If the pin is active high, above means that the voltage is higher than the voltage value describes
        // If the pin is active low, above means that the voltage is lower than the voltage value describes
        watch-above: func(value: f32) -> result<pollable, gpio-error>;
        // Returns a pollable if this function succeeds, the pollable will be ready whenever the voltage level is below a certain value, below has different meanings if the gpio is active high or active low
        // Value describes a value the ADC can return and has sufficient margin to also support 32 bit ADC's, when used with a lower resolution ADC, all values above the limit of the ADC will be considered as watching for the fully active state
        // If the pin is active high, below means that the voltage is lower than the voltage value describes
        // If the pin is active low, below means that the voltage is higher than the voltage value describes
        watch-below-raw: func(value: u32) -> result<pollable, gpio-error>;
        // Returns a pollable if this function succeeds, the pollable will be ready whenever the voltage level is below a certain value, below has different meanings if the gpio is active high or active low
        // The value describes a fraction of the fully active state, so the value must lie in the interval [0.0, 1.0] with 0.0 meaning fully inactive, 1.0 meaning fully active and 0.5 laying in the middle between fully inactive and fully active
        // If the pin is active high, below means that the voltage is lower than the voltage value describes
        // If the pin is active low, below means that the voltage is higher than the voltage value describes
        watch-below: func(value: f32) -> result<pollable, gpio-error>;
    }

    resource analog-in-out-pin {
        // Returns the configuration of the gpio this resource is tied to
        get-config: func() -> analog-config;

        // Sets the PWM value of the pin according to the input value, the value depends on if the pin is active high or active low
        // The value has sufficient margin to also support 32 bit DAC's, when used with a lower resolution DAC, all value above that resolution will represent a fully active state
        // If the pin is active high, higher values (until the max value of the DAC) will result in a higher duty cycle
        // If the pin is active low, higher values (until the max value of the DAC) will result in a lower duty cycle
        set-value-raw: func(value: u32) -> result<_, gpio-error>;
        // Sets the PWM value of the pin according to the input value, the value depends on if the pin is active high or active low
        // The value has sufficient margin to also support 32 bit DAC's, when used with a lower resolution DAC, all value above that resolution will represent a fully active state
        // If the pin is active high, higher values (until the max value of the DAC) will result in a higher duty cycle
        // If the pin is active low, higher values (until the max value of the DAC) will result in a lower duty cycle
        set-value: func(value: f32) -> result<_, gpio-error>;

        // Read the raw value the ADC returns, the value depends on if the pin is active high or active low
        // The value has sufficient margin to also support 32 bit ADC's, when used with a lower resolution ADC, the maximum value returned will be the maximum value the ADC can return
        // If the pin is active high, higher values mean higher voltage
        // If the pin is active low, higher values mean lower voltage
        read-raw: func() -> result<u32, gpio-error>;
        // Read the raw value the ADC returns, the value depends on if the pin is active high or active low
        // The value describes a fraction of the fully active state, so the value must lie in the interval [0.0, 1.0] with 0.0 meaning fully inactive, 1.0 meaning fully active and 0.5 laying in the middle between fully inactive and fully active
        // If the pin is active high, higher values mean higher voltage
        // If the pin is active low, higher values mean lower voltage
        read: func() -> result<f32, gpio-error>;

        // Returns a pollable if this function succeeds, the pollable will be ready whenever the voltage level is above a certain value, above has different meanings if the gpio is active high or active low
        // Value describes a value the ADC can return and has sufficient margin to also support 32 bit ADC's, when used with a lower resolution ADC, all values above the limit of the ADC will be considered as watching for the fully active state
        // If the pin is active high, above means that the voltage is higher than the voltage value describes
        // If the pin is active low, above means that the voltage is lower than the voltage value describes
        watch-above-raw: func(value: u32) -> result<pollable, gpio-error>;
        // Returns a pollable if this function succeeds, the pollable will be ready whenever the voltage level is above a certain value, above has different meanings if the gpio is active high or active low
        // The value describes a fraction of the fully active state, so the value must lie in the interval [0.0, 1.0] with 0.0 meaning fully inactive, 1.0 meaning fully active and 0.5 laying in the middle between fully inactive and fully active
        // If the pin is active high, above means that the voltage is higher than the voltage value describes
        // If the pin is active low, above means that the voltage is lower than the voltage value describes
        watch-above: func(value: f32) -> result<pollable, gpio-error>;
        // Returns a pollable if this function succeeds, the pollable will be ready whenever the voltage level is below a certain value, below has different meanings if the gpio is active high or active low
        // Value describes a value the ADC can return and has sufficient margin to also support 32 bit ADC's, when used with a lower resolution ADC, all values above the limit of the ADC will be considered as watching for the fully active state
        // If the pin is active high, below means that the voltage is lower than the voltage value describes
        // If the pin is active low, below means that the voltage is higher than the voltage value describes
        watch-below-raw: func(value: u32) -> result<pollable, gpio-error>;
        // Returns a pollable if this function succeeds, the pollable will be ready whenever the voltage level is below a certain value, below has different meanings if the gpio is active high or active low
        // The value describes a fraction of the fully active state, so the value must lie in the interval [0.0, 1.0] with 0.0 meaning fully inactive, 1.0 meaning fully active and 0.5 laying in the middle between fully inactive and fully active
        // If the pin is active high, below means that the voltage is lower than the voltage value describes
        // If the pin is active low, below means that the voltage is higher than the voltage value describes
        watch-below: func(value: f32) -> result<pollable, gpio-error>;
    }

    // Functions to acquire certain GPIO pins configured in the desired mode
    // These functions can also be used for pins that are allowed to change mode, if pin 1 was an input but can also be an output,
    // calling get-analog-out will return a analog-out-pin tied to that specific pin and the earlier acquired resource will
    // return error types when it's methods are being invoked
    get-analog-in: func(pin-label: string, %flags: list<analog-flags>) -> result<analog-in-pin, gpio-error>;
    get-analog-out: func(pin-label: string, %flags: list<analog-flags>) -> result<analog-out-pin, gpio-error>;
    get-analog-in-out: func(pin-label: string, %flags: list<analog-flags>) -> result<analog-in-out-pin, gpio-error>;
}

world gpio {
    import digital;
    import analog;
}
